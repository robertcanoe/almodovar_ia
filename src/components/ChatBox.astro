---
---

<section class="chat-container">
  <div id="chat-output" class="chat-output">
    <div class="welcome-message bot-message">
      ¬°Hola! Soy el asistente virtual de Almod√≥var del R√≠o. Puedes preguntarme sobre:
      <ul>
        <li>üè∞ El Castillo y monumentos</li>
        <li>üéâ Fiestas y eventos</li>
        <li>üìç C√≥mo llegar y ubicaci√≥n</li>
        <li>üèõÔ∏è Servicios municipales</li>
        <li>üé® Cultura y turismo</li>
      </ul>
    </div>
  </div>
  <form id="chat-form" class="chat-form">
    <div class="input-wrapper">
      <input 
        type="text" 
        id="chat-input" 
        placeholder="Preg√∫ntame sobre Almod√≥var del R√≠o..." 
        aria-label="Tu pregunta"
        required
        autocomplete="off"
      />
      <div id="typing-indicator" class="typing-indicator hidden">
        <div class="typing-bubble">
          <span></span>
          <span></span>
          <span></span>
        </div>
        <span class="typing-text">Pensando...</span>
      </div>
    </div>
    <button type="submit" aria-label="Enviar mensaje">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="22" y1="2" x2="11" y2="13"></line>
        <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
      </svg>
    </button>
  </form>
</section>

<script>
  import MarkdownIt from 'markdown-it';
  import createDOMPurify from 'dompurify';
  
  const DOMPurify = createDOMPurify(window);
  const md = new MarkdownIt({
    html: true,
    breaks: true,
    linkify: true
  });

  interface Message {
    type: 'user' | 'bot' | 'error';
    content: string;
    timestamp: number;
  }

  const STORAGE_KEY = 'almodovar-chat-history';
  const MAX_HISTORY = 50;

  class ChatManager {
    private form: HTMLFormElement;
    private input: HTMLInputElement;
    private output: HTMLDivElement;
    private typingIndicator: HTMLDivElement;
    private history: Message[] = [];

    constructor() {
      this.form = document.getElementById('chat-form') as HTMLFormElement;
      this.input = document.getElementById('chat-input') as HTMLInputElement;
      this.output = document.getElementById('chat-output') as HTMLDivElement;
      this.typingIndicator = document.getElementById('typing-indicator') as HTMLDivElement;

      this.loadHistory();
      this.setupEventListeners();
    }

    private setupEventListeners() {
      this.form.addEventListener('submit', (e) => this.handleSubmit(e));
      this.input.addEventListener('keydown', (e) => this.handleKeydown(e));
      window.addEventListener('beforeunload', () => this.saveHistory());
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();
      const pregunta = this.input.value.trim();
      if (!pregunta) return;

      this.addMessage(pregunta, 'user');
      this.input.value = '';
      
      this.toggleTyping(true);

      try {
        const response = await fetch('/api/pregunta', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ pregunta }),
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Error al procesar la pregunta');
        }

        this.addMessage(data.respuesta, 'bot');
      } catch (error: any) {
        this.addMessage(error.message || 'Ha ocurrido un error al procesar tu pregunta', 'error');
      } finally {
        this.toggleTyping(false);
        this.input.focus();
      }
    }

    private handleKeydown(e: KeyboardEvent) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.form.requestSubmit();
      }
    }

    private addMessage(content: string, type: Message['type']) {
      const message: Message = {
        type,
        content,
        timestamp: Date.now()
      };

      this.history.push(message);
      if (this.history.length > MAX_HISTORY) {
        this.history.shift();
      }

      const messageEl = document.createElement('div');
      messageEl.className = `${type}-message message-hidden`;
      
      if (type === 'error') {
        messageEl.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="12"></line>
            <line x1="12" y1="16" x2="12.01" y2="16"></line>
          </svg>
          <span>${this.escapeHtml(content)}</span>
        `;
      } else {
        // Procesar Markdown y enlaces
        const processed = this.processContent(content);
        messageEl.innerHTML = processed;
      }
      
      this.output.appendChild(messageEl);
      requestAnimationFrame(() => messageEl.classList.remove('message-hidden'));
      this.output.scrollTop = this.output.scrollHeight;
    }

    private processContent(content: string): string {
      // Convertir Markdown a HTML y sanitizar
      const html = md.render(content);
      return DOMPurify.sanitize(html);
    }

    private escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    private toggleTyping(show: boolean) {
      this.typingIndicator.classList.toggle('hidden', !show);
      this.input.disabled = show;
      const button = this.form.querySelector('button');
      if (button) button.disabled = show;
    }

    private loadHistory() {
      const saved = localStorage.getItem(STORAGE_KEY);
      if (saved) {
        try {
          const messages: Message[] = JSON.parse(saved);
          messages.forEach(msg => this.addMessage(msg.content, msg.type));
        } catch (e) {
          console.error('Error loading chat history:', e);
        }
      }
    }

    private saveHistory() {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(this.history));
    }
  }

  // Inicializar el chat cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    new ChatManager();
  });
</script>

<style>
  .welcome-message {
    opacity: 0;
    animation: fadeIn 0.5s ease-out forwards;
  }

  .welcome-message ul {
    margin-top: 0.5rem;
    padding-left: 1.5rem;
  }

  .welcome-message li {
    margin: 0.25rem 0;
  }

  .input-wrapper {
    position: relative;
    flex: 1;
  }

  .typing-indicator {
    position: absolute;
    top: -2.5rem;
    left: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: opacity 0.3s ease;
    background: rgba(0, 0, 0, 0.8);
    padding: 0.5rem 1rem;
    border-radius: 1rem;
    color: white;
  }

  .typing-bubble {
    display: flex;
    gap: 4px;
  }

  .typing-text {
    font-size: 0.875rem;
  }

  .typing-indicator.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .typing-bubble span {
    width: 6px;
    height: 6px;
    background: white;
    border-radius: 50%;
    animation: bounce 0.8s infinite;
  }

  .typing-bubble span:nth-child(2) { animation-delay: 0.2s; }
  .typing-bubble span:nth-child(3) { animation-delay: 0.4s; }

  .message-hidden {
    opacity: 0;
    transform: translateY(10px);
  }

  .user-message,
  .bot-message,
  .error {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .bot-message {
    line-height: 1.6;
  }

  .bot-message a {
    color: #90cdf4;
    text-decoration: none;
    border-bottom: 1px solid currentColor;
    transition: opacity 0.2s;
  }

  .bot-message a:hover {
    opacity: 0.8;
  }

  .bot-message ul {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
  }

  .bot-message li {
    margin: 0.25rem 0;
  }

  .error {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  button svg {
    width: 1.2rem;
    height: 1.2rem;
  }

  button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-4px); }
  }
</style>